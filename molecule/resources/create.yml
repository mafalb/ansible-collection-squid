---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  become: "{{ not (item.rootless|default(true)) }}"
  vars:
    podman_exec: "{{ lookup('env','MOLECULE_PODMAN_EXECUTABLE')|default('podman',true) }}"
  tasks:

    - name: Log into a container registry
      containers.podman.podman_login:
        certdir: >-
          {% if lookup('env', 'DOCKER_CERT_PATH') %}
          {{ item.cert_path | default(lookup('env', 'DOCKER_CERT_PATH') + '/cert.pem') }}
          {% endif %}
        executable: "{{ podman_exec }}"
        username: "{{ item.registry.credentials.username }}"
        password: "{{ item.registry.credentials.password }}"
        registry: "{{ item.registry.url }}"
        tlsverify: "{{ item.registry.tls_verify | default(lookup('env', 'DOCKER_TLS_VERIFY')) or false }}"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: >-
          "{{ item.name }} registry username:
          {{ item.registry.credentials.username | default('None specified') }}"
      when:
        - item.registry is defined
        - item.registry.url is defined and item.registry.url
        - item.registry.credentials is defined
        - item.registry.credentials.username is defined
      changed_when: false

    - name: Check presence of custom Dockerfiles
      ansible.builtin.stat:
        path: "{{ molecule_scenario_directory + '/' + (item.dockerfile | default('Dockerfile.j2')) }}"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "Dockerfile: {{ item.dockerfile | default('None specified') }}"
      register: dockerfile_stats

    - name: Create Dockerfiles from image names
      ansible.builtin.template:
        src: >-
          {%- if dockerfile_stats.results[i].stat.exists -%}
           {{ molecule_scenario_directory + '/' + (item.dockerfile | default('Dockerfile.j2')) }}
          {%- else -%}
           {{ playbook_dir + '/Dockerfile.j2' }}
          {%- endif -%}
        dest: "{{ molecule_ephemeral_directory }}/Dockerfile_{{ item.image | regex_replace('[^a-zA-Z0-9_]', '_') }}"
        mode: "0600"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        index_var: i
        label: >-
          "Dockerfile: {{ item.dockerfile | default('None specified') }};
          Image: {{ item.image | default('None specified') }}"
      when: not item.pre_build_image | default(false)
      register: platforms

    - name: Discover local Podman images
      containers.podman.podman_image_info:
        name: "molecule_local/{{ item.item.name }}"
        executable: "{{ podman_exec }}"
      with_items: "{{ platforms.results }}"
      loop_control:
        label: "{{ item.item.name | default('None specified') }}"
      when:
        - not item.pre_build_image | default(false)
      register: podman_images

    - name: Build an Ansible compatible image # noqa: no-handler
      containers.podman.podman_image:
        build:
          extra_args: >-
            {% if item.item.buildargs is defined %}{% for i, k in item.item.buildargs.items() %}--build-arg={{ i }}={{ k }}{% endfor %}{% endif %}
            {% if item.item.pull is defined %}--pull={{ item.item.pull }}{% endif %}
          file: "{{ item.dest }}"
        name: "molecule_local/{{ item.item.image }}"
        path: "{{ molecule_scenario_directory }}"
        pull: "{{ item.item.pull | default(omit) }}"
      loop: "{{ platforms.results }}"
      loop_control:
        label: "{{ item.item.image | default('None specified') }}"
      when:
        - platforms.changed or podman_images.results | map(attribute='images') | select('equalto', []) | list | count >= 0
        - not item.item.pre_build_image | default(false)
      register: result
      until: result is not failed
      retries: 3
      delay: 30
      no_log: false
      changed_when: false

    - name: Determine the CMD directives
      ansible.builtin.set_fact:
        command_directives_dict: >-
          {{ command_directives_dict | default({}) |
             combine({item.name: item.command | default(["bash", "-c", "while true; do sleep 10000; done"])})
          }}
      with_items: "{{ molecule_yml.platforms }}"
      loop_control:
        label: >-
          "{{ item.name }} command:
          {{ item.command | default('None specified') }}"
      when: item.override_command | default(true)

    - name: Get the one platform with networks defined
      ansible.builtin.debug:
        msg: "{{ item }}"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        extended: true
        label: "{{ item }}"
      register: podman_networks
      when:
        - item.networks is defined
        - ansible_loop.first
      failed_when: false

    - name: Discover local podman networks
      containers.podman.podman_network_info:
        name: "{{ item.name }}"
      loop: "{{ podman_networks.results[0].ansible_loop.allitems[0].networks }}"
      loop_control:
        label: "{{ item.name }}"
      register: podman_network
      failed_when: false

    - name: Debug podman_networks
      ansible.builtin.debug:
        var: podman_networks

    - name: Debug podman_network
      ansible.builtin.debug:
        var: podman_network

    - name: Create podman network dedicated to this scenario
      containers.podman.podman_network:
        name: "{{ item.item.name }}"
        internal: "{{ item.item.internal | default(omit) }}"
        subnet: "{{ item.item.subnet | default(omit) }}"
        executable: "{{ podman_exec }}"
        gateway: "{{ item.item.gateway | default(omit) }}"
      loop: "{{ podman_network.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      when:
        - item.msg is defined

    - name: Create molecule instance(s)
      containers.podman.podman_container:
        name: "{{ item.name }}"
        cap_add: "{{ item.capabilities | default(omit) }}"
        # it's necessary to exclude empty args as ansible modules run_command method doesn't handle this well
        cmd_args: "{{ molecule_podman_args | reject('equalto', '') | list + item.extra_opts | default([]) }}"
        command: "{{ (command_directives_dict | default({}))[item.name] | default('') }}"
        detach: "{{ item.detach | default(omit) }}"
        device: "{{ item.devices | default(omit) }}"
        dns: "{{ item.dns_servers | default(omit) }}"
        env: "{{ item.env | default(omit) }}"
        etc_hosts: "{{ item.etc_hosts | default(omit) }}"
        executable: "{{ podman_exec }}"
        expose: "{{ item.exposed_ports | default(omit) }}"
        hostname: "{{ item.hostname | default(omit) }}"
        image: "{{ item.pre_build_image | default(false) | ternary('', 'molecule_local/') }}{{ item.image }}"
        ip: "{{ item.ip | default(omit) }}"
        network: "{{ item.network | default(omit) }}"
        pid: "{{ item.pid_mode | default(omit) }}"
        privileged: "{{ item.privileged | default(omit) }}"
        publish: "{{ item.published_ports | default(omit) }}"
        security_opt: "{{ item.security_opts | default(omit) }}"
        systemd: "{{ item.systemd | default(omit) }}"
        tmpfs: "{{ item.tmpfs | default(omit) }}"
        tty: "{{ item.tty | default(omit) }}"
        ulimits: "{{ item.ulimits | default(omit) }}"
        volume: "{{ item.volumes | default(omit) }}"
        state: started
      register: server
      changed_when: false
      with_items: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      async: 7200
      poll: 0
      vars:
        molecule_podman_args:
          - "{% if item.cgroup_manager is defined %}--cgroup-manager={{ item.cgroup_manager }}{% endif %}"
          - >-
            {% if item.restart_policy is defined %}
            --restart={{ item.restart_policy }}{% if item.restart_retries is defined %}:{{ item.restart_retries }}{% endif %}
            {% endif %}
          - "{% if item.storage_opt is defined %}--storage-opt={{ item.storage_opt }}{% endif %}"
          - "{% if item.storage_driver is defined %}--storage-driver={{ item.storage_driver }}{% endif %}"

    - name: Wait for instance(s) creation to complete
      become: "{{ not item.item.rootless | default(omit) }}"
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: podman_jobs
      until: podman_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"
      loop_control:
        label: "{{ item.item.name | default('Unnamed') }}"
